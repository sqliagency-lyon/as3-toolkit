package com.sqliagency.as3.utils {
	
	/**
	 * @author Nicolas CHENG (sqliagency)
	 * @created 01/06/2009
	 */
	public class UIDUtil {
		
		/**
		 *  @private
		 *  Char codes for 0123456789ABCDEF
		 */
		private static const ALPHA_CHAR_CODES:Array = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70];

		/**
		 *  Generates a UID (unique identifier) based on ActionScript's
		 *  pseudo-random number generator and the current time.
		 *
		 *  <p>The UID has the form
		 *  <code>"XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX"</code>
		 *  where X is a hexadecimal digit (0-9, A-F).</p>
		 *
		 *  <p>This UID will not be truly globally unique; but it is the best
		 *  we can do without player support for UID generation.</p>
		 *
		 *  @return The newly-generated UID.
		 */
		public static function createUID():String {
			var uid:Array = new Array(36);
			var index:int = 0;
			
			var i:int;
			var j:int;
			
			for (i = 0; i < 8; i++) {
				uid[index++] = ALPHA_CHAR_CODES[Math.floor(Math.random() *  16)];
			}

			for (i = 0; i < 3; i++) {
				uid[index++] = 45; // charCode for "-"
				
				for (j = 0; j < 4; j++) {
					uid[index++] = ALPHA_CHAR_CODES[Math.floor(Math.random() *  16)];
				}
			}
			
			uid[index++] = 45; // charCode for "-"

			var time:Number = new Date().getTime();
			// Note: time is the number of milliseconds since 1970,
			// which is currently more than one trillion.
			// We use the low 8 hex digits of this number in the UID.
			// Just in case the system clock has been reset to
			// Jan 1-4, 1970 (in which case this number could have only
			// 1-7 hex digits), we pad on the left with 7 zeros
			// before taking the low digits.
			var timeString:String = ("0000000" + time.toString(16).toUpperCase()).substr(-8);
			
			for (i = 0; i < 8; i++) {
				uid[index++] = timeString.charCodeAt(i);
			}
			
			for (i = 0; i < 4; i++) {
				uid[index++] = ALPHA_CHAR_CODES[Math.floor(Math.random() *  16)];
			}
			
			return String.fromCharCode.apply(null, uid);
		}

		/**
		 * A utility method to check whether a String value represents a 
		 * correctly formatted UID value. UID values are expected to be 
		 * in the format generated by createUID(), implying that only
		 * capitalized A-F characters in addition to 0-9 digits are
		 * supported.
		 * 
		 * @param uid The value to test whether it is formatted as a UID.
		 * 
		 * @return Returns true if the value is formatted as a UID.
		 */
		public static function isUID(uid:String):Boolean {
			if (uid != null && uid.length == 36) {
				for (var i:uint = 0; i < 36; i++) {
					var c:Number = uid.charCodeAt(i);

					// Check for correctly placed hyphens
					if (i == 8 || i == 13 || i == 18 || i == 23) {
						if (c != 45) {
							return false;
						}
					}
					// We allow capital alpha-numeric hex digits only
					else if (c < 48 || c > 70 || (c > 57 && c < 65)) {
						return false;
					}
				}

				return true;
			}

			return false;
		}
    }
}